[tool.poetry]
name = "hca-ingest-tools"
version = "0.1.0"
description = "Tools for ingesting biological data into Human Cell Atlas infrastructure"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
homepage = "https://github.com/your-org/hca-ingest-tools"
repository = "https://github.com/your-org/hca-ingest-tools"
documentation = "https://github.com/your-org/hca-ingest-tools/docs"
keywords = ["hca", "biological-data", "s3", "sync", "manifest", "ingestion"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{include = "hca_ingest", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
boto3 = "^1.34.0"
botocore = "^1.34.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
rich = "^13.7.0"
typer = "^0.12.0"
pyyaml = "^6.0"
tqdm = "^4.66.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
ruff = "^0.1.0"
mypy = "^1.8.0"
black = "^23.12.0"
isort = "^5.13.0"
pre-commit = "^3.6.0"
types-pyyaml = "^6.0.0"
types-requests = "^2.31.0"
moto = "^4.2.0"

[tool.poetry.group.test.dependencies]
pytest-asyncio = "^0.23.0"
pytest-xdist = "^3.5.0"
coverage = "^7.4.0"

[tool.poetry.scripts]
hca-smart-sync = "hca_ingest.smart_sync.cli:main"
hca-ingest = "hca_ingest.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Development tool configurations
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
target-version = ['py310']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "moto.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
